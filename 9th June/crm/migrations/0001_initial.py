# Generated by Django 4.1 on 2023-06-08 07:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Credentials",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cust_id", models.CharField(default="", max_length=254)),
                ("cust_name", models.CharField(default="", max_length=254)),
                ("item", models.CharField(default="", max_length=254)),
                ("type", models.CharField(default="", max_length=254)),
                ("plateform", models.CharField(default="", max_length=254)),
                ("username", models.CharField(default="", max_length=254)),
                ("password", models.CharField(default="", max_length=254)),
                ("remark", models.CharField(default="", max_length=254)),
                ("status", models.CharField(default="", max_length=254)),
                ("cust_org", models.CharField(default="", max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cust_id", models.CharField(default="", max_length=254)),
                ("cust_name", models.CharField(default="", max_length=254)),
                ("cust_address", models.CharField(default="", max_length=254)),
                ("cust_con_per", models.CharField(default="", max_length=254)),
                (
                    "cust_mobile",
                    phonenumber_field.modelfields.PhoneNumberField(
                        max_length=128, region=None
                    ),
                ),
                (
                    "cust_tele",
                    phonenumber_field.modelfields.PhoneNumberField(
                        max_length=128, region=None
                    ),
                ),
                (
                    "cust_whatsapp",
                    phonenumber_field.modelfields.PhoneNumberField(
                        max_length=128, region=None
                    ),
                ),
                (
                    "cust_email",
                    models.EmailField(
                        max_length=254,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                ("cust_website", models.CharField(default="", max_length=254)),
                ("cust_gst", models.CharField(default="", max_length=254)),
                ("cust_city", models.CharField(default="", max_length=254)),
                ("cust_state", models.CharField(default="", max_length=254)),
                ("cust_country", models.CharField(default="", max_length=254)),
                ("cust_pin", models.IntegerField()),
                ("cust_org", models.CharField(default="", max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name="Renewal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cust_id", models.CharField(default="", max_length=254)),
                ("cust_name", models.CharField(default="", max_length=254)),
                ("cust_org", models.CharField(default="", max_length=254)),
                ("product", models.CharField(default="", max_length=254)),
                ("rdc", models.DateField()),
                ("rde", models.DateField()),
                ("remark", models.CharField(default="", max_length=254)),
                ("status", models.CharField(default="", max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name="Worksheet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("cust_id", models.CharField(default="", max_length=254)),
                ("work_id", models.CharField(default="", max_length=254)),
                ("cust_name", models.CharField(default="", max_length=254)),
                ("worktype", models.CharField(default="", max_length=254)),
                ("workprogress", models.CharField(default="", max_length=254)),
                ("remarks", models.CharField(default="", max_length=50)),
                ("cust_org", models.CharField(default="", max_length=254)),
                ("current_date", models.DateField()),
                ("project_id", models.CharField(default="", max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("is_main", models.BooleanField(default=False)),
                ("is_create", models.BooleanField(default=False)),
                ("is_report", models.BooleanField(default=False)),
                ("is_edit", models.BooleanField(default=False)),
                ("is_customer", models.BooleanField(default=False)),
                ("is_worksheet", models.BooleanField(default=False)),
                ("is_renewal", models.BooleanField(default=False)),
                ("is_credential", models.BooleanField(default=False)),
                ("is_cf", models.BooleanField(default=False)),
                ("is_wf", models.BooleanField(default=False)),
                ("is_rf", models.BooleanField(default=False)),
                ("is_crf", models.BooleanField(default=False)),
                ("is_cr", models.BooleanField(default=False)),
                ("is_wr", models.BooleanField(default=False)),
                ("is_crr", models.BooleanField(default=False)),
                ("is_rr", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
